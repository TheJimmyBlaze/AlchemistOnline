// <auto-generated />
using System;
using AlchemistOnline.API.Services.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlchemistOnline.API.Migrations
{
    [DbContext(typeof(AlchemistContext))]
    [Migration("20200213043945_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AlchemistOnline.Model.Database.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountID");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.AccountEmail", b =>
                {
                    b.Property<int>("AccountEmailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountEmailID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasFilter("[EmailAddress] IS NOT NULL");

                    b.ToTable("AccountEmails");
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.AccountKey", b =>
                {
                    b.Property<int>("AccountKeyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Key")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("KeyCreationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountKeyID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("AccountKeys");
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.EnvironmentDifficulty", b =>
                {
                    b.Property<int>("EnvironmentDifficultyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColourHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RewardMultiplier")
                        .HasColumnType("int");

                    b.Property<int>("SkillRequirement")
                        .HasColumnType("int");

                    b.HasKey("EnvironmentDifficultyID");

                    b.ToTable("EnvironmentDifficulties");

                    b.HasData(
                        new
                        {
                            EnvironmentDifficultyID = 1,
                            ColourHex = "#03a9f4",
                            Description = "A simple drudge, not very rewarding.",
                            ImagePath = "Mundane.png",
                            Name = "Mundane",
                            RewardMultiplier = 1,
                            SkillRequirement = 0
                        },
                        new
                        {
                            EnvironmentDifficultyID = 2,
                            ColourHex = "#2196f3",
                            Description = "A short jaunt, there may be ingredients arround.",
                            ImagePath = "Simple.png",
                            Name = "Simple",
                            RewardMultiplier = 2,
                            SkillRequirement = 1
                        },
                        new
                        {
                            EnvironmentDifficultyID = 3,
                            ColourHex = "#3f51b5",
                            Description = "Theres a few ingredients, and the treck requires some experience.",
                            ImagePath = "Manageable.png",
                            Name = "Manageable",
                            RewardMultiplier = 3,
                            SkillRequirement = 2
                        },
                        new
                        {
                            EnvironmentDifficultyID = 4,
                            ColourHex = "#673ab7",
                            Description = "Overcoming this challenge rewards a handful of Ingredients.",
                            ImagePath = "Challenging.png",
                            Name = "Challenging",
                            RewardMultiplier = 4,
                            SkillRequirement = 4
                        },
                        new
                        {
                            EnvironmentDifficultyID = 5,
                            ColourHex = "#9c27b0",
                            Description = "A difficult trek with harse terrian, the adventurous will be rewarded.",
                            ImagePath = "Dangerous.png",
                            Name = "Dangerous",
                            RewardMultiplier = 5,
                            SkillRequirement = 6
                        },
                        new
                        {
                            EnvironmentDifficultyID = 6,
                            ColourHex = "#e91e63",
                            Description = "A bounty of flora can be found here if you can find an explorer daring enough to undertake the task.",
                            ImagePath = "Perilous.png",
                            Name = "Perilous",
                            RewardMultiplier = 6,
                            SkillRequirement = 8
                        });
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.EnvironmentLocation", b =>
                {
                    b.Property<int>("EnvironmentLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnvironmentDifficultyID")
                        .HasColumnType("int");

                    b.Property<int>("EnvironmentTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ExpeditionSeconds")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentLocationID");

                    b.HasIndex("EnvironmentDifficultyID");

                    b.HasIndex("EnvironmentTypeID");

                    b.ToTable("EnvironmentLocations");

                    b.HasData(
                        new
                        {
                            EnvironmentLocationID = 1,
                            Description = "The jewel of an ancient civilization swallowed by the fetid maw of a seemingly endless sawmp.",
                            EnvironmentDifficultyID = 1,
                            EnvironmentTypeID = 1,
                            ExpeditionSeconds = 120,
                            ImagePath = "SunkenCitiesBog.png",
                            Name = "Sunken Cities Bog"
                        },
                        new
                        {
                            EnvironmentLocationID = 2,
                            Description = "Enourmous towering Pine trees, the ground blanketed with a dense thicket of bristling greenery.",
                            EnvironmentDifficultyID = 1,
                            EnvironmentTypeID = 2,
                            ExpeditionSeconds = 135,
                            ImagePath = "GreatPinesForest.png",
                            Name = "Great Pines Forest"
                        },
                        new
                        {
                            EnvironmentLocationID = 3,
                            Description = "A dark jungle nestled in a deep valley, the foliage so densly packed no light touches the undergrowth",
                            EnvironmentDifficultyID = 3,
                            EnvironmentTypeID = 3,
                            ExpeditionSeconds = 300,
                            ImagePath = "CloakValleyWilderness.png",
                            Name = "Cloak Valley Wilderness"
                        },
                        new
                        {
                            EnvironmentLocationID = 4,
                            Description = "For years an undending lightning storm has swirled arround the peaks of the Storm Crown",
                            EnvironmentDifficultyID = 4,
                            EnvironmentTypeID = 4,
                            ExpeditionSeconds = 480,
                            ImagePath = "StormCrownPeaks.png",
                            Name = "Storm Crown Peaks"
                        });
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.EnvironmentType", b =>
                {
                    b.Property<int>("EnvironmentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColourHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentTypeID");

                    b.ToTable("EnvironmentTypes");

                    b.HasData(
                        new
                        {
                            EnvironmentTypeID = 1,
                            ColourHex = "#cddc39",
                            ImagePath = "Swamp.png",
                            Name = "Swamp"
                        },
                        new
                        {
                            EnvironmentTypeID = 2,
                            ColourHex = "#795548",
                            ImagePath = "Forest.png",
                            Name = "Forest"
                        },
                        new
                        {
                            EnvironmentTypeID = 3,
                            ColourHex = "#4caf50",
                            ImagePath = "Jungle.png",
                            Name = "Jungle"
                        },
                        new
                        {
                            EnvironmentTypeID = 4,
                            ColourHex = "#9e9e9e",
                            ImagePath = "Mountain.png",
                            Name = "Mountain"
                        });
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.Expedition", b =>
                {
                    b.Property<int>("ExpeditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnvironmentLocationID")
                        .HasColumnType("int");

                    b.Property<int>("ExplorerID")
                        .HasColumnType("int");

                    b.HasKey("ExpeditionID");

                    b.HasIndex("EnvironmentLocationID");

                    b.HasIndex("ExplorerID")
                        .IsUnique();

                    b.ToTable("Expeditions");
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.Explorer", b =>
                {
                    b.Property<int>("ExplorerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<double>("ExperiencePoints")
                        .HasColumnType("float");

                    b.Property<int>("ExplorerTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExplorerID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ExplorerTypeID");

                    b.ToTable("Explorers");
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.ExplorerType", b =>
                {
                    b.Property<int>("ExplorerTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExplorerTypeID");

                    b.ToTable("ExplorerTypes");

                    b.HasData(
                        new
                        {
                            ExplorerTypeID = 1,
                            ImagePath = "Cartographer.png",
                            Name = "Cartographer"
                        },
                        new
                        {
                            ExplorerTypeID = 2,
                            ImagePath = "Tracker.png",
                            Name = "Tracker"
                        },
                        new
                        {
                            ExplorerTypeID = 3,
                            ImagePath = "Hunter.png",
                            Name = "Hunter"
                        });
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.Ingredient", b =>
                {
                    b.Property<int>("IngredientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EnvironmentTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IngredientTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientID");

                    b.HasIndex("EnvironmentTypeID");

                    b.HasIndex("IngredientTypeID");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientID = 1,
                            EnvironmentTypeID = 1,
                            ImagePath = "BogRoot.png",
                            IngredientTypeID = 3,
                            Name = "Bog Root"
                        },
                        new
                        {
                            IngredientID = 2,
                            EnvironmentTypeID = 2,
                            ImagePath = "PineSap.png",
                            IngredientTypeID = 4,
                            Name = "Pine Sap"
                        },
                        new
                        {
                            IngredientID = 3,
                            EnvironmentTypeID = 3,
                            ImagePath = "NightBlossom.png",
                            IngredientTypeID = 1,
                            Name = "Night Blossom"
                        },
                        new
                        {
                            IngredientID = 4,
                            EnvironmentTypeID = 4,
                            ImagePath = "LightningFern.png",
                            IngredientTypeID = 2,
                            Name = "Lightning Fern"
                        });
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.IngredientAmount", b =>
                {
                    b.Property<int>("IngredientAmountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("IngredientID")
                        .HasColumnType("int");

                    b.HasKey("IngredientAmountID");

                    b.HasIndex("AccountID");

                    b.HasIndex("IngredientID");

                    b.ToTable("IngredientAmounts");
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.IngredientType", b =>
                {
                    b.Property<int>("IngredientTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColourHex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientTypeID");

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            IngredientTypeID = 1,
                            ColourHex = "#f44336",
                            ImagePath = "Flower.png",
                            Name = "Flower"
                        },
                        new
                        {
                            IngredientTypeID = 2,
                            ColourHex = "#8bc34a",
                            ImagePath = "Leaf.png",
                            Name = "Leaf"
                        },
                        new
                        {
                            IngredientTypeID = 3,
                            ColourHex = "#795548",
                            ImagePath = "Stem.png",
                            Name = "Stem"
                        },
                        new
                        {
                            IngredientTypeID = 4,
                            ColourHex = "#ffc107",
                            ImagePath = "Sap.png",
                            Name = "Sap"
                        });
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.AccountEmail", b =>
                {
                    b.HasOne("AlchemistOnline.Model.Database.Account", "Account")
                        .WithOne("Email")
                        .HasForeignKey("AlchemistOnline.Model.Database.AccountEmail", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.AccountKey", b =>
                {
                    b.HasOne("AlchemistOnline.Model.Database.Account", "Account")
                        .WithOne("Key")
                        .HasForeignKey("AlchemistOnline.Model.Database.AccountKey", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.EnvironmentLocation", b =>
                {
                    b.HasOne("AlchemistOnline.Model.Database.EnvironmentDifficulty", "EnvironmentDifficulty")
                        .WithMany()
                        .HasForeignKey("EnvironmentDifficultyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlchemistOnline.Model.Database.EnvironmentType", "EnvironmentType")
                        .WithMany()
                        .HasForeignKey("EnvironmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.Expedition", b =>
                {
                    b.HasOne("AlchemistOnline.Model.Database.EnvironmentLocation", "EnvironmentLocation")
                        .WithMany()
                        .HasForeignKey("EnvironmentLocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlchemistOnline.Model.Database.Explorer", "Explorer")
                        .WithOne("Expedition")
                        .HasForeignKey("AlchemistOnline.Model.Database.Expedition", "ExplorerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.Explorer", b =>
                {
                    b.HasOne("AlchemistOnline.Model.Database.Account", "Account")
                        .WithMany("Explorers")
                        .HasForeignKey("AccountID");

                    b.HasOne("AlchemistOnline.Model.Database.ExplorerType", "ExplorerType")
                        .WithMany()
                        .HasForeignKey("ExplorerTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.Ingredient", b =>
                {
                    b.HasOne("AlchemistOnline.Model.Database.EnvironmentType", "EnvironmentType")
                        .WithMany()
                        .HasForeignKey("EnvironmentTypeID");

                    b.HasOne("AlchemistOnline.Model.Database.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlchemistOnline.Model.Database.IngredientAmount", b =>
                {
                    b.HasOne("AlchemistOnline.Model.Database.Account", "Account")
                        .WithMany("IngredientAmounts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlchemistOnline.Model.Database.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
